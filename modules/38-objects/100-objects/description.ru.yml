---

name: Объекты
theory: |

  В программировании мы постоянно оперируем данными, создаем числа, строки, выполняем над ними различные операции и затем используем полученный результат. Для операций у нас есть либо операторы, либо функции:

  ```python
  # Сложение с помощью оператора +
  1 + 3 # 4

  # Подсчет длины с помощью функции len()
  name = 'CodeBasics'
  len(name) # 10
  ```

  В такой схеме у нас есть четкое разделение: данные отдельно, функции отдельно. Но это не единственный способ организации кода. В Python наравне с таким разделением, используется и другой подход - объектно-ориентированный (ОО).

  Объектно-ориентированный код строится на объединении данных и функций в одну сущность называемую объектом. Данные в таком случае называются атрибутами, а функции методами. Как это выглядит:

  ```python
  name = 'CodeBasics'
  # Метод upper()
  upper_name = name.upper()
  print(upper_name) # 'CODEBASICS'
  ```

  Строки в Python - объекты. Выше мы видим вызов метода, то есть функции, которая связана со строкой. Вызов происходит через точку, идущую сразу за именем переменной. В остальном методы работают как обычные функции. Вызов можно делать и напрямую:

  ```python
  'CodeBasics'.upper() # 'CODEBASICS'
  ```

  В строки встроено множество разнообразных методов, которые нужны в повседневной жизни разработчика. Посмотреть их список можно в [документации](https://python.readthedocs.io/en/latest/library/stdtypes.html#string-methods). Вот несколько полезных примеров:

  ```python
  name = 'Python'

  # Возвращает индекс первого вхождения буквы в строку
  name.find('t') # 2

  # Переводит в нижний регистр
  name.lower() # 'python'

  # Заменяет одну подстроку другой
  name.replace('on', 'off') # 'Pythoff'
  ```

  Тоже самое касается и чисел и остальных типов данных, которые мы пока не изучали. Проще говоря, в Python почти все является объектом:

  ```python
  x = -5
  # Возвращает модуль числа
  # Имя выглядит странно, но это действительно имя метода
  x.__abs__()
  ```

  Почему такое странное имя метода с двумя подчеркиваниями вначале и в конце? В Python так называют методы, которые не предназначены для прямого вызова. Для них созданы функции, которые внутри себя уже сами делают вызовы методов:

  ```python
  x = -5
  abs(x) # вызывает x.__abs__()
  # -5 в 3 степени
  pow(x, 3) # вызывает x.__pow__()
  ```

  Зачем это нужно? Создатель Python, [решил](https://stackoverflow.com/questions/83983/why-isnt-the-len-function-inherited-by-dictionaries-and-lists-in-python), что будет нагляднее если математические или похожие на математические операции будут выражены функциями, как это привычнее для тех кто изучал математику. Он хотел, чтобы такие функции воспринимались как операции, типа сложения или вычитания. Кстати точно так же работает функция `len()`:

  ```python
  len('Hexlet') # Вызывает 'Hexlet'.__len__()
  ```

  Кроме методов у объектов есть атрибуты, правда, у встроенных в Python объектов их крайне мало. Один из немногих примеров - это атрибут `__doc__` у функций, который возвращает документацию функции. Да, функции тоже объекты:

  ```python
  len.__doc__ # 'Return the number of items in a container.'
  ```

  Атрибуты работают и выглядят как переменные, только указываются через точку после объекта.

instructions: |

  Приведите строку `text` к нижнему регистру и напечатайте её на экран. Пример метода, выполняющего эту задачу, приведен в теории.
